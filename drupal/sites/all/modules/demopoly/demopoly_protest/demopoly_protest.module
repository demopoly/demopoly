<?php
/**
 * @file
 * Code for the demopoly_protest feature.
 */

include_once('demopoly_protest.features.inc');

class ProtestController extends EntityAPIControllerExportable{
	public function save($protest) {
		if (empty($protest->pid)) {
			$protest->created=time();
			drupal_write_record('demopoly_protest', $protest);
			field_attach_insert('protest', $protest);
			module_invoke_all('entity_insert', 'protest', $protest);
		}else {
			$protest->changed=time();
			drupal_write_record('demopoly_protest', $protest,'pid');
			field_attach_update('protest', $protest);
			module_invoke_all('entity_update', 'protest', $protest);
		}
		return $protest;
	}
}
function demopoly_protest_entity_info(){
	$protest_info['protest'] = array(
			'label' => t('Protest'),
			'controller class' => 'ProtestController',
			'base table' => 'demopoly_protest',
			'uri callback' => 'demopoly_protest_uri',
			'save callback'=>'demopoly_protest_save',
			'views controller class' => 'EntityDefaultViewsController',

			'fieldable' => TRUE,
			'entity keys' => array(
					'id' => 'pid',
	),
			'static cache' => TRUE,
			'bundles' => array(
					'protest'=> array(
							'label' => 'Protest',
							'admin' => array(
									'path' => 'admin/structure/protest/manage',
									'access arguments' => array('administer protest'),
	),
	),
	),
			'view modes' => array(
					'full' => array(
							'label' => t('Full Protest'),
							'custom settings' =>  FALSE,
	),
					'teaser' => array(
							'label' => t('Protest teaser'),
							'custom settings' =>  FALSE,
	),
	)
	);

	return $protest_info;
}
function demopoly_protest_uri($protest){
	return array(
			'path' => 'protest/' . $protest->pid,
	);
}
function demopoly_protest_page_alter(&$page) {
    if (
      arg(0) == 'protest-detail'
      || arg(0) == 'protest'
      || arg(0) == 'qtip-preview'
      ) {
      unset($page['page_top']['toolbar']);
    }
  
}
function demopoly_protest_menu(){
	$items['admin/structure/protest/manage'] = array(
			'title' => 'Protest Admin',
			'description' => 'Manage Protest structure',
			'page callback' => 'demopoly_protest_info',
			'access arguments' => array('administer protests'),
	);
	$items['protest/%demopoly_protest'] = array(
			'title callback' => 'demopoly_protest_page_title',
			'title arguments' => array(1),
			'page callback' => 'demopoly_protest_page_view',
			'page arguments' => array(1),
			'access arguments' => array('view protests'),
			'type' => MENU_CALLBACK,
	);
	$items['protest/%demopoly_protest/edit'] = array(
			'title callback' => 'demopoly_protest_page_title',
			'title arguments' => array(1),
			'page callback' => 'demopoly_protest_edit',
			'page arguments' => array(1),
			'access arguments' => array('edit protests'),
			'type' => MENU_CALLBACK,
	);
	$items['protest/%demopoly_protest/delete'] = array(
			'title callback' => 'demopoly_protest_page_title',
			'title arguments' => array(1),
			'page callback' => 'drupal_get_form',
			'page arguments' => array('demopoly_protest_delete_form',1),
			'access arguments' => array('delete protests'),
			'type' => MENU_CALLBACK,
	);
	$items['protest/close_callback'] = array(
			'title' => 'Demopoly',
			'page callback' => 'demopoly_protest_close_callback',
			'page arguments' => array(),
			'access callback' => true,
			'type' => MENU_CALLBACK,
	);
	//
	$items['protest/add'] = array(
			'title' => 'Add an Protest!',
			'page callback' => 'demopoly_protest_add',
			'access arguments' => array('add protests'),
	);

	$items['protest/%demopoly_protest/activate'] = array(
			'title' => 'Activate Protest',
			'access callback' => true,
			'page arguments' => array(1),
			'page callback' => 'demopoly_protest_is_frontpage_activate',
			'#ajax' => array(
					'method' => 'html',
      )
	);
	return $items;
}
function demopoly_protest_delete($id) {
	return entity_delete('protest', $id);
}
function demopoly_protest_load($id) {
	return entity_load_single('protest', $id) ;
}
function demopoly_protest_close_callback() {
  drupal_add_js('
  window.setTimeout("closeIt()", 1);
  closeIt = function(){
    top.jQuery.fn.colorbox.close();
  }', 'inline');
  return 'close';
}
function demopoly_protest_delete_form_submit($form,&$form_state) {
	$pid=$form_state['storage']['pid'];
	if (!empty($pid)) {
		entity_delete('protest', $pid);
	}
	$form_state['redirect']='protest/close_callback';
}
function demopoly_protest_delete_form($form,&$form_state,$protest) {
	$form_state['storage']=array('pid'=>$protest->pid);
  $form['markup-wrap-start']=array(
    '#type'=>'markup',
    '#markup'=>t('<div class="markup-wrap">')
  );
	$form['text']=array(
	 '#type'=>'markup',
	 '#markup'=>t('<h2>Do you really like to delete this image?</h2>')
	);
  $form['submit']=array(
      '#type'=>'submit',
      '#value'=>t('Yes')
  );
  $form['button-wrap-start']=array(
    '#type'=>'markup',
    '#markup'=>t('<div class="button-wrap">')
  );
	$form['yes']=array(
			'#type'=>'markup',
			'#markup'=>t('<a href="#Yes" class="button large delete-yes">Yes</a>')
	);
  $form['no']=array(
      '#type'=>'markup',
      '#markup'=>t('<a href="#No" class="button large delete-no">No</a>')
  );
  $form['markup-wrap-end']=array(
    '#type'=>'markup',
    '#markup'=>t('</div></div>')
  );
  $form['script']=array(
      '#type'=>'markup',
      '#markup'=>t('
        <script type="text/javascript">
          (function($){
            Drupal.behaviors.demopoly_protest = {
              attach:function(context){
                $(".button.delete-yes").click(function() {
                  $("form").submit();      
                });
                $(".button.delete-no").click(function() {
                  top.jQuery.colorbox.close();
                });
              }}
          })(jQuery);
        </script>
      ')
  );
	return $form;
}
function demopoly_protest_permission(){
	return array(
			'administer protests' =>  array(
					'title' => t('Administer protests'),
					'restrict access' => TRUE,
	),
			'view protests' => array(
					'title' => t('View protests'),
	),
			'add protests' => array(
					'title' => t('Add protests'),
	),
			'edit protests' => array(
					'title' => t('Edit protests'),
	),
			'delete protests' => array(
					'title' => t('Delete protests'),
	)
	);
}


function demopoly_protest_info() {
	return ('Welcome to the administration page for your protests!');
}

function demopoly_protest_page_title($protest){
	return $protest->pid;
}
function demopoly_protest_preprocess_protest(&$variables) {
	$variables['content']=$variables['element']->content;
	$variables['view_mode']=$variables['content']['#view_mode'];
	unset($variables['content']['#theme']);
}
function demopoly_protest_page_view($protest, $view_mode = 'full'){
	$entity = $protest;
	/*
	 * Remove previously built content, if exists
	 */
	$entity->content = array();

	$title = filter_xss($entity->title);
	/*
	 * Build the fields content
	 */
	field_attach_prepare_view(
    'protest',
	array($entity->pid => $entity),
	$view_mode
	);

	entity_prepare_view('protest', array($entity->pid => $entity));

	$entity->content += field_attach_view(
      'protest',
	$entity, $view_mode
	);

	/*
	 * Specify the theme to use and set the #element. Note that the
	 * key you use to pass the entity object must match the key you
	 * set in in the variables in entity_theme(). So in the case below,
	 * we use the key named #element because in entity_theme() we set
	 * the following code:
	 *
	 * array(
	 *   'entity' => array(
	 *     'variables' => array('element' => null),
	 *     'template' => 'entity'
	 *   ),
	 * );
	 */
	$entity->content += array(
    '#theme'     => 'protest',
    '#element'   => $entity,
    '#view_mode' => 'full',
    '#language'  => NULL,
	);
	return $entity->content;
}
function demopoly_protest_edit($protest) {
	return drupal_get_form('demopoly_protest_add_form', $protest);
}
function demopoly_protest_add() {
	global $user;
	$protest = (object) array (
			'pid' => '',
			'type' => 'protest',
	);

	return drupal_get_form('demopoly_protest_add_form', $protest);
}


function demopoly_protest_add_form($form, &$form_state, $protest) {
	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Save'),
			'#weight'=>100
	);
	$form['pid'] = array(
			'#type' => 'hidden',
			'#value' => $protest->pid,
			'#weight'=>1000
	);
	field_attach_form('protest', $protest, $form, $form_state);
	return $form;
}

function demopoly_protest_add_form_validate($form, &$form_state) {
	$protest_submisttion = (object) $form_state['values'];
	field_attach_form_validate('protest', $protest_submisttion, $form, $form_state);
}

function demopoly_protest_add_form_submit($form, &$form_state) {
	global $user;
	$protest_submission = (object) $form_state['values'];
	field_attach_submit('protest', $protest_submission, $form, $form_state);
	$protest_submission->uid = $user->uid;
	$protest = demopoly_protest_save($protest_submission);
	$form_state['redirect'] = "protest/close_callback";
}
function demopoly_protest_save(&$protest) {
	return entity_get_controller('protest')->save($protest);
}


function demopoly_protest_is_frontpage_activate($protest){
	$uid = $protest->uid;
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'protest');
	$query->propertyCondition('uid', $uid);
	$query->fieldCondition('field_protest_is_frontpage','value','1');
	$result = $query->execute();
    
	$array = array();
	foreach ( $result['protest'] as $active){
		$array[] = $active->pid;
	}
	$protests = entity_load('protest',$array);
    
	foreach($protests as $active){
	  $active->field_protest_is_frontpage[LANGUAGE_NONE]=array();
		$active->field_protest_is_frontpage[LANGUAGE_NONE][0]['value']=0;
		entity_save('protest', $active);
	}
	$protest->field_protest_is_frontpage[LANGUAGE_NONE][0]['value']=1;
	entity_save('protest', $protest);
	$commands = array();
	$commands[] = ajax_command_invoke('.demopoly-my-images-reload', 'click');
	$page = array('#type' => 'ajax', '#commands' => $commands);
	ajax_deliver($page);
}

function demopoly_protest_form_alter(&$form, &$form_state, $form_id){
	if($form_id == "demopoly_protest_add_form"){
	  
    global $user;
    $prot_usr = user_load($user->uid);
    if (isset($prot_usr->field_firstname['und'])) { 
    $form['field_firstname']['und'][0]['value']['#default_value'] = $prot_usr->field_firstname['und'][0]['value'];
    }
    //$form['field_city']['und'][0]['value']['#default_value'] = $prot_usr->field_city['und'][0]['value'];
    
		$form['#theme'] = array('demopoly_protest_add_form');
		$form['#attached']['js'][] = drupal_get_path('module','demopoly_protest').'/demopoly_protest.js';
		if($form['field_protest_context']['und'][0]['value']['#default_value'] == ''){
			$form['field_protest_context']['und'][0]['value']['#default_value'] = $form['field_protest_context']['und'][0]['#description'];
		}
		$form['field_protest_context']['und'][0]['value']['#resizable'] = FALSE;
		$form['submit']['#value'] = 'Take Part';
	}
}
function demopoly_protest_theme(){
	return array(
		'demopoly_protest_add_form' => array(
			'render element' => 'form',
			'template' => 'demopoly_protest_add_form'  	
			),'protest' => array(
      'variables' => array('element' => null),
      'template' => 'protest'
      ),
      );
}

function demopoly_protest_preprocess_page(&$variables){
	if(
	 arg(0) == 'protest-detail'
	 || arg(0) == 'qtip-preview'
	 || (arg(0) == 'user' && arg(1) == 'delete')
   || arg(1) == 'close_callback'
  ){
		$variables['theme_hook_suggestions'] = array('page__protest');
	}
}
?>
