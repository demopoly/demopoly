<?php

/**
 * @file
 * Infinite scroll replaces the default link pager with an automatic pre-fetch content in the same page.
 */

/**
 * Implements hook_menu_alter().
 */
function infinitescroll_menu_alter(&$items) {
  $items['node']['page callback'] = 'infinite_scroll_node_page_default';
} 

/**
 * Menu callback; Generate a listing of promoted nodes (within an identifiable container).
 * Note: it was not possible to implement this without copying here the full function.
 */
function infinite_scroll_node_page_default() {
  $select = db_select('node', 'n')
    ->fields('n', array('nid', 'sticky', 'created'))
    ->condition('promote', 1)
    ->condition('status', 1)
    ->orderBy('sticky', 'DESC')
    ->orderBy('created', 'DESC')
    ->extend('PagerDefault')
    ->limit(variable_get('default_nodes_main', 10))
    ->addTag('node_access');

  $nids = $select->execute()->fetchCol();

  if (!empty($nids)) {
    $nodes = node_load_multiple($nids);
    $build = node_view_multiple($nodes);
    $build['nodes']['#prefix'] = '<div id="node-default-list">';
    $build['nodes']['#suffix'] = '</div>';

    // 'rss.xml' is a path, not a file, registered in node_menu().
    drupal_add_feed('rss.xml', variable_get('site_name', 'Drupal') . ' ' . t('RSS'));
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
    drupal_set_title('');
  }
  else {
    drupal_set_title(t('Welcome to @site-name', array('@site-name' => variable_get('site_name', 'Drupal'))), PASS_THROUGH);

    $default_message = '<p>' . t('No front page content has been created yet.') . '</p>';

    $default_links = array();
    if (_node_add_access()) {
      $default_links[] = l(t('Add new content'), 'node/add');
    }
    if (!empty($default_links)) {
      $default_message .= theme('item_list', array('items' => $default_links));
    }

    $build['default_message'] = array(
      '#markup' => $default_message,
      '#prefix' => '<div id="first-time">',
      '#suffix' => '</div>',
    );
  }

  return $build;
}

/**
 * Implements hook_theme().
 */
function infinitescroll_theme($existing, $type, $theme, $path) {
  return array(
    'infinitescroll_selectors' => array(
      'arguments' => array(),
    ), 
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function infinitescroll_theme_registry_alter(&$theme_registry) {
  $theme_registry['table']['function'] = 'infinitescroll_table';
  $theme_registry['pager']['function'] = 'infinitescroll_pager';
}

/**
 * Implements theme_table(). Return an uniquely identified themed table.
 */
function infinitescroll_table($variables) {
  static $counter;

  if (!isset($variables['attributes']['id'])) {
    $counter = $counter ? $counter : 0;
    $variables['attributes']['id'] = "table-$counter";
  }

  $counter++;
  return theme_table($variables);
}

/**
 * Implements theme_pager(). Simplifies pager markup and add jQuery Infinite Scroll plugin.
 */
function infinitescroll_pager($variables) {
  global $pager_page_array, $pager_total;
  $tags = $variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];

  if ($pager_total[$element] <= 1) return;

  $li_previous = theme('pager_previous', array('text' => (isset($tags[1]) ? $tags[1] : t('‹ previous')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  if ($li_previous) {
    $items[] = array('class' => array('pager-previous'), 'data' => $li_previous);
  }

  $li_next = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('next ›')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  if ($li_next) {
    $items[] = array('class' => array('pager-next'), 'data' => $li_next);
  }

  theme('infinitescroll_selectors');
  drupal_add_css(drupal_get_path('module', 'infinitescroll') . '/infinitescroll.css');
  drupal_add_js(drupal_get_path('module', 'infinitescroll') . '/infinitescroll.js');

  return theme('item_list', array(
    'items' => $items, 
    'attributes' => array('class' => array('pager')),
  ));
}

/**
 * Implements hook_preprocess_views_view_table(). Adds an unique ID per table.
 */
function infinitescroll_preprocess_views_view_table(&$vars) {
  static $counter;
  $counter = $counter ? $counter : 0;
  $vars['attributes'] .= 'id="views-table-' . $counter . '"';
  $counter++;
}

/**
 * Return the jQuery selectors required to initialize the infinite scroll.
 */
function theme_infinitescroll_selectors() {
  $settings = array(
    'pager' => '.item-list:has(.pager)',
    'pagerNext' => '.item-list > .pager > .pager-next a',
    'target' => array(
      'view-content' => '> table:last-child'
    )
  );

  drupal_add_js(array('infscr' => $settings), 'setting');
}